package system.main.navigation;

import java.awt.Color;
import java.awt.image.BufferedImage;

public class Schematic {

	int width;
	int height;
	boolean collisionMap[][];
	
	int startX, startY;
	int endX, endY;
	
	public Schematic(BufferedImage schem) {
		startX = -1;
		startY = -1;
		endX = -1;
		endY = -1;
		loadMapFromImg(schem);
	}
	
	private void loadMapFromImg(BufferedImage schem) {
		width = schem.getWidth();
		height = schem.getHeight();
		collisionMap = new boolean[height][width];
		
		for(int y = 0; y < height; y++){
			for(int x = 0; x < width; x++){
				
				String hexcode = Integer.toHexString(schem.getRGB(x,y));
				
				if(!hexcode.equals("ffffffff")) {
					collisionMap[y][x] = true;
					schem.setRGB(x, y, Color.black.getRGB());
					System.out.print(1);
				} else {
					collisionMap[y][x] = false;
					System.out.print(0);
				}
			}
			System.out.print("\n");
		}
	}
	
	public void setStartPos(int sX, int sY) {
		if(!collisionMap[sY][sX]) {
			startX = sX;
			startY = sY;
		}
	}
	
	public void setEndPos(int eX, int eY) {
		if(!collisionMap[eY][eX]) {
			endX = eX;
			endY = eY;
		}
	}
	
	public boolean[][] getCollisionMap() {
		return collisionMap;
	}
	
	public int getWidth() {
		return width;
	}
	
	public int getHeight() {
		return height;
	}
	
	public int getStartX() { return startX; }
	public int getStartY() { return startY; }
	public int getEndX() { return endX; }
	public int getEndY() { return endY; }
}
